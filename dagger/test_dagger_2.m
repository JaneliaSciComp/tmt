do_actually_submit = true ;
maximum_running_slot_count = 5 ;
bsub_option_string = '-P scicompsoft -W 59 -J test-dagger-2' ;
slots_per_job = 1 ;
stdouterr_file_name = '' ;  % will go to /dev/null
do_use_xvfb = false ;
rule_1 = struct('name_from_input_file_index', {{'file_0.mat'}}, ...
                'name_from_output_file_index', {{'file_1.mat'}}, ...
                'function_handle', { @increment_mat_file }, ...
                'other_arguments', { {'file_1.mat', 'file_0.mat'} }, ...
                'slot_count', {slots_per_job}, ...
                'stdouterr_file_name', {'rule_1.stdouterr.txt'}, ...
                'bsub_option_string', {bsub_option_string}, ...
                'do_use_xvfb', {do_use_xvfb} ) ;
rule_2 = struct('name_from_input_file_index', {{'file_0.mat'}}, ...
                'name_from_output_file_index', {{'file_2.mat'}}, ...
                'function_handle', { @increment_mat_file }, ...
                'other_arguments', { {'file_2.mat', 'file_0.mat'} }, ...
                'slot_count', {slots_per_job}, ...
                'stdouterr_file_name', {'rule_2.stdouterr.txt'}, ...
                'bsub_option_string', {bsub_option_string}, ...
                'do_use_xvfb', {do_use_xvfb} ) ;
rule_3 = struct('name_from_input_file_index', {{'file_1.mat', 'file_2.mat'}}, ...
                'name_from_output_file_index', {{'file_3.mat'}}, ...
                'function_handle', { @add_mat_files }, ...
                'other_arguments', { {'file_3.mat', 'file_2.mat', 'file_1.mat'} }, ...
                'slot_count', {slots_per_job}, ...
                'stdouterr_file_name', {'rule_3.stdouterr.txt'}, ...
                'bsub_option_string', {bsub_option_string}, ...
                'do_use_xvfb', {do_use_xvfb} ) ;
rule_from_rule_index = vertcat(rule_1, rule_2, rule_3) ;            

% Create the initial input file
ensure_file_does_not_exist('file_0.mat') ;
ensure_file_does_not_exist('file_1.mat') ;
ensure_file_does_not_exist('file_2.mat') ;
ensure_file_does_not_exist('file_3.mat') ;
save_anonymous('file_0.mat', 0) ;                    

maximum_wait_time = 200 ;
do_show_progress_bar = true ;
[state_from_rule_index, state_from_overall_file_index] = ...
    dagger(rule_from_rule_index, maximum_running_slot_count, do_actually_submit, maximum_wait_time, do_show_progress_bar)  %#ok<NOPTS>

% Check some things
assert(all(state_from_rule_index==+1)) 
assert(all(state_from_overall_file_index==+1)) 
final_value = load_anonymous('file_3.mat') ;
assert(final_value==2) 
fprintf('Test passed\n') ;
