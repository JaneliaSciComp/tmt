' a script to open "traces" files (.tcs)
' this is a binary format that is fairly easy 
' to write from matlab, and to read in Spike2
' Adam Taylor, 2011/07/11

printLog("\n\n\n\n\n\n\n\n\n");

'Open the file, halting if this fails
var inp%;
inp% := fileOpen("",9);
if inp% < 0 then
	dlgCreate("Error");
	dlgText("Error opening file",2,1);
    dlgButton(0,"");  'delete cancel button
	dlgShow();    
    halt;
endif

'make a new Spike2 file
var outp%;
outp%:=fileNew(7,0,10,1,0);
    '7->empty data file, 0->create it, nothing else, 
    '10->10 us is the time step,1->1 time step per ADC conversion
    '0->data file is 0 s long until further notice

'Make the binary file the current view
view(inp%);

'set the endianness to little
bRWEndian(0);

'Read the number of traces
var nTrace%;
var count%;
count%:=bReadSize(4,nTrace%);
printLog("nTrace: %d\n",nTrace%);

'add the traces to the Spike2 file
var i%;
var lenName%;
var name$;
var lenUnits%;
var units$;
var t0;
var dt;
var nEl%;
var ar[1];
var chanId%;
var pts%;
for i%:=1 to nTrace% do
    view(inp%);
    printLog("i: %d\n",i%);
    'read the name of the channel
    count%:=bReadSize(4,lenName%);
    printLog("lenName: %d\n",lenName%);
    if lenName%>0 then
        count%:=bReadSize(lenName%,name$);
    else
        count%:=0;
        name$:="";
    endif
    printLog("name: %s\n",name$);
    'read the units string for the channel
    count%:=bReadSize(4,lenUnits%);
    printLog("lenUnits: %d\n",lenUnits%);
    if lenUnits%>0 then
        count%:=bReadSize(lenUnits%,units$);
    else
        count%:=0;
        units$:="";
    endif
    printLog("units: %s\n",units$);
    'read time origin
    count%:=bReadSize(8,t0);
    printLog("t0: %f\n",t0);
    'read dt
    count%:=bReadSize(8,dt);
    printLog("dt: %f\n",dt);
    'read number of els in array
    count%:=bReadSize(4,nEl%);
    printLog("nEl: %d\n",nEl%);
    'read the array in
    resize ar[nEl%];
    if nEl%>0 then
        count%:=bReadSize(8,ar[]);
    else
        count%:=0;
    endif
    'arrMul(ar[],10);  ' scale it, to test
    printLog("ar[0]: %f\n",ar[0]);    
    printLog("ar[1]: %f\n",ar[1]);    
    printLog("ar[2]: %f\n",ar[2]);    
    printLog("ar[3]: %f\n",ar[3]);    
    printLog("ar[nEl%-2]: %f\n",ar[nEl%-2]);    
    printLog("ar[nEl%-1]: %f\n",ar[nEl%-1]);    
        
    'add channel to spike2 file
    view(outp%);
    chanId%:=chanNew(0,9,0,dt);
        '0->next available slot,9->realwave channel,0->ignored,dt-> sets dt for the chan
    printLog("chanId%: %d\n",chanId%);    
    pts%:=chanWriteWave(chanId%,ar[],0);
    printLog("pts%: %d\n",pts%);
    if pts%<0 then
        printLog("Error: %s\n",error$(pts%));
    endif
    chanTitle$(chanId%,name$);
    chanUnits$(chanId%,units$);
    chanShow(chanId%);
next;

'close the file
view(inp%);
fileClose();

'make the Spike2 file the current view, etc
view(outp%);
xRange(0,MaxTime());  'Show whole time range
optimise(-1);  'Optimise display
window(00,0,100,100);  'Make full screen
frontView(outp%);  'Bring window to front
